#!/usr/bin/env python3
"""
File Server Middleware for ADK
Serves files generated by LaTeX MCP stdio service
"""

from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from pathlib import Path
import json
import os

app = FastAPI(title="ADK File Server")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET"],
    allow_headers=["*"],
)

FILES_DIR = Path("/tmp/adk_files")

@app.get("/files/{file_id}/{format}")
async def serve_file(file_id: str, format: str):
    """Serve generated files by file_id and format"""
    if format not in ["pdf", "svg", "png"]:
        raise HTTPException(status_code=400, detail="Invalid format")
    
    file_path = FILES_DIR / file_id / f"doc.{format}"
    
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="File not found")
    
    # Set appropriate content type
    content_types = {
        "pdf": "application/pdf",
        "svg": "image/svg+xml", 
        "png": "image/png"
    }
    
    return FileResponse(
        path=file_path,
        media_type=content_types[format],
        filename=f"{file_id}.{format}"
    )

@app.get("/files/{file_id}/info")
async def file_info(file_id: str):
    """Get file information"""
    file_dir = FILES_DIR / file_id
    
    if not file_dir.exists():
        raise HTTPException(status_code=404, detail="File not found")
    
    # Collect available formats and sizes
    formats = []
    file_sizes = {}
    
    for format_ext in ["pdf", "svg", "png"]:
        file_path = file_dir / f"doc.{format_ext}"
        if file_path.exists():
            formats.append(format_ext)
            file_sizes[format_ext] = file_path.stat().st_size
    
    return {
        "file_id": file_id,
        "available_formats": formats,
        "file_sizes": file_sizes,
        "created_at": int(file_dir.stat().st_mtime)
    }

@app.get("/health")
async def health():
    """Health check endpoint"""
    return {"status": "ok", "service": "adk-file-server"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8010)